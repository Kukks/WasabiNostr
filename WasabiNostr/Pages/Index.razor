@page "/"
@using WasabiNostr.Web.State
@using NNostr.Client
@using System.Net.WebSockets
@inject ApplicationState ApplicationState
@inject ISnackbar SnackbarService
@implements IDisposable
@if (ApplicationState.Loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
@if (ApplicationState.WasabiConfigDetected is null)
{
    <MudButton Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ApplicationState.DetectWasabi()">Detect Wasabi</MudButton>
}
else if (ApplicationState.WasabiConfigDetected is false)
{
    <MudAlert Severity="Severity.Error" style="overflow-wrap: break-word;" class="mb-1">The Wasabi config file was not detected</MudAlert>
    <MudButton Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ApplicationState.DetectWasabi()">Detect Wasabi</MudButton>
}
else if (ApplicationState.WasabiConfigDetected is true)
{
    <MudAlert Severity="Severity.Success" class="mb-1">The Wasabi config file was detected</MudAlert>
    @if (ApplicationState.WasabiConfigError)
    {
        <MudAlert Severity="Severity.Error">There was an error reading the Wasabi config file</MudAlert>
        <MudButton Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ApplicationState.DetectWasabi()">Detect Wasabi</MudButton>
    }
    else if (ApplicationState.NetworkTypeDetected is not null)
    {
        <MudAlert Severity="Severity.Success" class="mb-1">You are currently configured to use @ApplicationState.NetworkTypeDetected </MudAlert>

        @if (ApplicationState.Coordinator is not null)
        {
            <MudAlert Severity="Severity.Success" class="mb-1" style="overflow-wrap: break-word;">The Wasabi coordinator is currently set to @ApplicationState.Coordinator </MudAlert>


            <MudPaper Outlined="true" Class="pb-0">
                @if (ApplicationState.Discovering)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                }


                <MudList >
                    <MudListItem>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">

                            <MudStack Class="flex-grow-1">
                                @for (var index = 0; index < ApplicationState.Relays.Count; index++)
                                {
                                    var currIndex = index;
                                    @if(ApplicationState.Discovering && ApplicationState.Client is { } composite && Uri.TryCreate(ApplicationState.Relays[index], UriKind.Absolute, out  var relayUri) && composite.States.TryGetValue(relayUri, out var relayState))
                                    {
                                        var icon = relayState switch
                                        {
                                            WebSocketState.Open => Icons.Material.Filled.CheckCircle,
                                            WebSocketState.Connecting => Icons.Material.Filled.HourglassTop,
                                           _ => Icons.Material.Filled.Stop
                                        };
                                        
                                        var color = relayState switch
                                        {
                                            WebSocketState.Open => Color.Success,
                                            WebSocketState.Connecting => Color.Warning,
                                            _ => Color.Error
                                        };
                                        <MudTextField @bind-Value="ApplicationState.Relays[index]" Label="@($"Nostr Relay #{index + 1}")" Variant="Variant.Text" InputType="InputType.Url" Disabled="@(ApplicationState.Loading || ApplicationState.Discovering)" Adornment="Adornment.End" AdornmentIcon="@icon" AdornmentColor="@color" AdornmentAriaLabel="@relayState?.ToString()"></MudTextField>
                                
                                    }
                                    else
                                    {
                                        <MudTextField @bind-Value="ApplicationState.Relays[index]" Label="@($"Nostr Relay #{index + 1}")" Variant="Variant.Text" InputType="InputType.Url" Disabled="@(ApplicationState.Loading || ApplicationState.Discovering)" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.RemoveCircle" OnAdornmentClick="() => ApplicationState.Relays.RemoveAt(currIndex)"></MudTextField>
                                
                                    }
                                    
                                   }
                                @if (!ApplicationState.Loading && !ApplicationState.Discovering)
                                {
                                    <div>
                                        <MudButton Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="ApplicationState.Discovering ? Color.Secondary : Color.Primary" OnClick="() => ApplicationState.Relays.Add(string.Empty)">Add relay</MudButton>
                                    </div>
                                }

                            </MudStack>
                            <div>
                                <MudButton Size="Size.Large" Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="ApplicationState.Discovering ? Color.Secondary : Color.Primary" OnClick="OnDiscoveryClick">@(ApplicationState.Discovering ? _connectingToRelay ? "Connecting to relay" : "Cancel Discovery" : "Start Discovery")</MudButton>
                            </div>
                        </MudStack>
                    </MudListItem>
                </MudList>
            </MudPaper>

            @if (ApplicationState.EventResults is not null)
            {
                <MudPaper Outlined="true" Class="pb-0 mt-2" Elevation="1">
                    <MudList >
                        <MudListSubheader>
                            Results
                        </MudListSubheader>
                        @{
                            var first = true;

                            @foreach (var result in ApplicationState.EventResults.ToArray())
                            {
                                var endpoint = result.GetTaggedData(ApplicationState.EndpointTagIdentifier).FirstOrDefault();
                                if (endpoint is null)
                                {
                                    continue;
                                }

                                var isCurrent = endpoint == ApplicationState.Coordinator;
                                if (!first)
                                {
                                    <MudDivider/>
                                }

                                first = false;

                                <MudListItem  >
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudStack Justify="Justify.Center" Spacing="0" Style="max-width: 75%" >
                                            <MudText Typo="Typo.body1">@result.Content</MudText>
                                            <MudText Typo="Typo.body2" Style="overflow-wrap:break-word;">
                                                @endpoint
                                            </MudText>
                                            <MudText Typo="Typo.body2">
                                                Published @AsTimeAgo(result.CreatedAt.Value)
                                            </MudText>
                                        </MudStack>
                                        <div>
                                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">

                                                <MudButton Color="@(isCurrent ? Color.Success : Color.Primary)" Disabled="isCurrent || ApplicationState.Loading" OnClick="() => Set(endpoint)">@(isCurrent ? "Current" : "Set")</MudButton>
                                                <MudButton Color="Color.Secondary" Disabled="ApplicationState.Loading" OnClick="() => OpenParameters(result)">View parameters</MudButton>
                                            </MudButtonGroup>
                                        </div>
                                    </MudStack>

                                </MudListItem>
                            }
                        }
                        @if (ApplicationState.Discovering)
                        {
                            <MudListItem>

                                <MudStack Row="true" Justify="Justify.SpaceBetween">

                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80px" Width="70%"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80px" Width="25%"/>
                                </MudStack>
                            </MudListItem>
                        }

                    </MudList>

                </MudPaper>
                <MudDialog IsVisible="@(ApplicationState.ExpandedCoordinator != null)">
                    <TitleContent>
                        <MudText Typo="Typo.h6" Inline="true" Style="overflow-wrap: break-word;">
                            @ApplicationState.ExpandedCoordinator?.result.PublicKey
                           
                        </MudText>
                    </TitleContent>
                    <DialogContent>
                        @if (ApplicationState.ExpandedCoordinator is not null)
                        {
                            <MudText Typo="Typo.body1">
                                @ApplicationState.ExpandedCoordinator?.result.Content
                            </MudText>
                            <MudList >
                                <MudListSubheader>Last round parameters</MudListSubheader>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Minimum inputs
                                        </MudText>
                                        <MudText >
                                            @ApplicationState.ExpandedCoordinator?.roundParameters.minInputCountByRound
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Maximum inputs
                                        </MudText>
                                        <MudText >
                                            @ApplicationState.ExpandedCoordinator?.roundParameters.maxInputCountByRound
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Fee
                                        </MudText>
                                        <MudText >
                                            @(ApplicationState.ExpandedCoordinator?.roundParameters.coordinationFeeRate.rate * 100)% + free under @(ApplicationState.ExpandedCoordinator?.roundParameters.coordinationFeeRate.plebsDontPayThreshold / 100000000m)) BTC + free remixing
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Input registration time
                                        </MudText>
                                        <MudText >
                                            @ApplicationState.ExpandedCoordinator?.roundParameters.standardInputRegistrationTimeout
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Allowed input types
                                        </MudText>
                                        <MudText >
                                            @string.Join(", ", ApplicationState.ExpandedCoordinator.Value.roundParameters.allowedInputTypes.Select(i => (ApplicationState.ScriptType) i))
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Allowed input amounts
                                        </MudText>
                                        <MudText >
                                            @(ApplicationState.ExpandedCoordinator?.roundParameters.allowedInputAmounts.min / 100000000m) - @(ApplicationState.ExpandedCoordinator?.roundParameters.allowedInputAmounts.max / 100000000m) BTC
                                        </MudText>
                                    </MudStack>

                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Allowed output types
                                        </MudText>
                                        <MudText >
                                            @string.Join(", ", ApplicationState.ExpandedCoordinator.Value.roundParameters.allowedOutputTypes.Select(i => (ApplicationState.ScriptType) i))
                                        </MudText>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText >
                                            Allowed output amounts
                                        </MudText>
                                        <MudText >
                                            @(ApplicationState.ExpandedCoordinator?.roundParameters.allowedOutputAmounts.min / 100000000m) - @(ApplicationState.ExpandedCoordinator?.roundParameters.allowedOutputAmounts.max / 100000000m) BTC
                                        </MudText>
                                    </MudStack>

                                </MudListItem>
                            </MudList>
                        }

                        @* <pre>@JsonSerializer.Serialize(ApplicationState.ExpandedCoordinator?.roundParameters)</pre> *@
                    </DialogContent>
                    <DialogActions>
                        @{
                            var isCurrent = ApplicationState.ExpandedCoordinator?.result.GetTaggedData(ApplicationState.EndpointTagIdentifier).FirstOrDefault() == ApplicationState.Coordinator;
                        }
                        <MudButton Disabled="isCurrent || ApplicationState.Loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="SetFromDialog" Class="px-10">@(isCurrent ? "Current coordinator" : "Set as coordinator")</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => ApplicationState.ExpandedCoordinator = null" Class="px-10">Close</MudButton>
                    </DialogActions>
                </MudDialog>
            }
        }
    }
    else
    {
        <MudAlert Severity="Severity.Error">There was an error detecting the coordinator currently used</MudAlert>

        <MudButton Disabled="ApplicationState.Loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ApplicationState.DetectWasabi()">Detect Wasabi</MudButton>
    }
}

@code{

    protected override async Task OnInitializedAsync()
    {
        await ApplicationState.DetectWasabi();
        ApplicationState.StateHasChanged += StateHasChanged;
    }

    private void StateHasChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ApplicationState.StateHasChanged -= StateHasChanged;
    }

    private bool _connectingToRelay;

    private async Task OnDiscoveryClick()
    {
        if (ApplicationState.Discovering)
        {
            ApplicationState.CancelDiscovery();
        }
        else
        {
            try
            {
                _connectingToRelay = true;

                await ApplicationState.Discover();
            }
            finally
            {
                _connectingToRelay = false;
            }
        }
    }

    private static string AsTimeAgo(DateTimeOffset dateTime)
    {
        var timeSpan = DateTimeOffset.Now.Subtract(dateTime);

        return timeSpan.TotalSeconds switch
        {
            <= 60 => $"{timeSpan.Seconds} seconds ago",

            _ => timeSpan.TotalMinutes switch
            {
                <= 1 => "about a minute ago",
                < 60 => $"about {timeSpan.Minutes} minutes ago",
                _ => timeSpan.TotalHours switch
                {
                    <= 1 => "about an hour ago",
                    < 24 => $"about {timeSpan.Hours} hours ago",
                    _ => timeSpan.TotalDays switch
                    {
                        <= 1 => "yesterday",
                        <= 30 => $"about {timeSpan.Days} days ago",

                        <= 60 => "about a month ago",
                        < 365 => $"about {timeSpan.Days / 30} months ago",

                        <= 365 * 2 => "about a year ago",
                        _ => $"about {timeSpan.Days / 365} years ago"
                    }
                }
            }
        };
    }


    private async Task OpenParameters(NostrEvent result)
    {
        var error = await ApplicationState.FetchInfo(result);
        if (error is not null)
        {
            SnackbarService.Add(error, Severity.Error);
        }
        else if (ApplicationState.ExpandedCoordinator is null)
            SnackbarService.Add($"Could not load a coinjoin round to show parameters", Severity.Error);
    }

    private async Task Set(string uri)
    {
        uri = uri.Replace("https://btip.nl:23001", "https://kravens.duckdns.org:23001");
        uri = uri.Replace("plugins/wabisabi-coordinator/plugins/wabisabi-coordinator", "plugins/wabisabi-coordinator");
        await ApplicationState.SetConfig(uri);
        if (ApplicationState.Coordinator == uri)
        {
            SnackbarService.Add($"Coordinator has been set to {uri}", Severity.Success);

            ApplicationState.ExpandedCoordinator = null;
        }
        else
        {
            SnackbarService.Add($"Coordinator could not be set", Severity.Error);
        }
    }

    private async Task SetFromDialog()
    {
        var endpoint = ApplicationState.ExpandedCoordinator!.Value.result.GetTaggedData(ApplicationState.EndpointTagIdentifier).First();


        https: //kravens.duckdns.org:23001/plugins/wabisabi-coordinator/wabisabi/status
        await Set(endpoint);
    }

}

